<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cooking Analytics</title>
    <description>My name is Miguel Gaspar and this blog is focused on Analytics solutions, providing architectural and development recipes, ..., that can be applied not only to traditional Business Analytics solutions but also to some hot topics like Big Data, IoT and Social Innovation. The content will mostly be based in the use of Pentaho technology.</description>
    <link>http://mfgaspar.github.io//</link>
    <atom:link href="http://mfgaspar.github.io//feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 19 Jul 2016 14:33:17 +0100</pubDate>
    <lastBuildDate>Tue, 19 Jul 2016 14:33:17 +0100</lastBuildDate>
    <generator>Jekyll v3.0.2</generator>
    
      <item>
        <title>Pentaho and Custom Action Sequences</title>
        <description>&lt;p&gt;The Action Sequences or xAction, as you like to call them, are getting less used, because we now have better alternatives as using kettle, anyhow they are still useful in some cases.&lt;/p&gt;

&lt;h2 id=&quot;quick-introduction&quot;&gt;Quick introduction&lt;/h2&gt;

&lt;p&gt;From Action Sequences we can call transformations, so in reality, we can use an Action Sequence that calls a kettle transformation and to all the work (inclusive creating a session variable, but that was a bit slow on versions previous to 6.1. So, if we needed something that works faster, the alternative would be 
a Action Sequence.&lt;/p&gt;

&lt;p&gt;If we want to do something simple as running a query and create a session variable based on the result of the query, we can just use the standard and available actions of an Action Sequence. But, when we need to create some more complex logic for a specific use case where we can’t do it just by using the “easy” actions of an Action Sequence, we can also write some custom code.&lt;/p&gt;

&lt;p&gt;There is on action in a Action Sequence with the name “Custom”, that it’s very interesting. We can build our own Java code, pass parameters from the Action Sequence to the code we want to execute and get back the result of the execution of that custom code.&lt;/p&gt;

&lt;h3 id=&quot;creating-custom-action-sequence&quot;&gt;Creating custom Action Sequence&lt;/h3&gt;

&lt;p&gt;Let’s suppose we want to build a “Hello World!”. Well we can do it with the JavaScript step, but not if we wnat to set a session variable with a value that comes fom LDAP, based on the use that is logged in.&lt;/p&gt;

&lt;p&gt;So, let’s pick the example of the “Hello World!”. The goal here would be, to get the user name that is logged in, apppend a hello message, and let the Action Sequence return the message to be displayed on the screen.&lt;/p&gt;

&lt;p&gt;Since we won’t have the “JavaScript” action for every thing, I’ve used the “Custom” action to create a “Hello World!” example.&lt;/p&gt;

&lt;p&gt;First we need to create the Action Sequence and add an input variable. We need the variable to have the name of the user that is logged in.&lt;/p&gt;

&lt;p&gt;If using the Eclipse Plugin for Pentaho Action Sequences, you should be creating something as the image below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mfgaspar.github.io/assets/custom_xaction_1.png&quot; alt=&quot;Custom Action Sequence - Adding an input variable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Else if using a text editor, you will need to add something as:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;inputs&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;username&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;sources&amp;gt;&lt;/span&gt; 
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;security&amp;gt;&lt;/span&gt;principalName&lt;span class=&quot;nt&quot;&gt;&amp;lt;/security&amp;gt;&lt;/span&gt; 
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/sources&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/username&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/inputs&amp;gt;&lt;/span&gt;
    &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The next step is to add the custom action where we need to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add a name to the action;&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add the name of the class that will make the call of our Java Class with the custom code. this will always be defined to be:&lt;/p&gt;

    &lt;p&gt;“org.pentaho.platform.engine.services.solution.PojoComponent”.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Add the input variable with the value to be passed to the code;&lt;/li&gt;
  &lt;li&gt;Add the output variable and the mapping to the Action Sequence variable to where the custom code will return the result.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The image below, show exactly those inputs and outputs as the name of the class that will make the call to our custom code.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mfgaspar.github.io/assets/custom_xaction_2.png&quot; alt=&quot;Custom Action Sequence - Adding an input variable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If using a text editor you will need to write the following code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;actions&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;action-definition&amp;gt;&lt;/span&gt; 
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;component-name&amp;gt;&lt;/span&gt;
			org.pentaho.platform.engine.services.solution.PojoComponent
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/component-name&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;action-type&amp;gt;&lt;/span&gt;Custom&lt;span class=&quot;nt&quot;&gt;&amp;lt;/action-type&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;action-inputs&amp;gt;&lt;/span&gt; 
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;name&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;username&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/action-inputs&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;action-resources/&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;action-outputs&amp;gt;&lt;/span&gt; 
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;output&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;mapping=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;outputmessage&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/action-outputs&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;component-definition&amp;gt;&lt;/span&gt;
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;class&amp;gt;&lt;/span&gt;
				com.github.mfgaspar.pentaho.Action Sequence.CustomCodeForActionSequence
			&lt;span class=&quot;nt&quot;&gt;&amp;lt;/class&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/component-definition&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/action-definition&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/actions&amp;gt;&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;At last we need to have one output message to display on the screen, so we need to add an output to the Action Sequence. You can see an example on the image bellow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mfgaspar.github.io/assets/custom_xaction_3.png&quot; alt=&quot;Custom Action Sequence - Adding an input variable&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If using a text editor the code will look like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-xml&quot; data-lang=&quot;xml&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;outputs&amp;gt;&lt;/span&gt; 
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;outputmessage&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;string&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; 
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/outputs&amp;gt;&lt;/span&gt;
  	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We already saw the code of the Action Sequence, but we haven’t saw the java code that will be executed. In the code below you will see that we need to reference 2 interfaces IAcceptsRuntimeInputs and IProducesRuntimeOutputs, so that we can accept inputs and write to outputs.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;com&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;github&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mfgaspar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;pentaho&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Action&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Sequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.pentaho.platform.api.engine.IAcceptsRuntimeInputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.pentaho.platform.api.engine.IActionSequenceResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.pentaho.platform.api.engine.IProducesRuntimeOutputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.logging.Log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.apache.commons.logging.LogFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This small sample accepts one name to whom we are sending back a message saying Hello &lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;all&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CustomCodeForActionSequence&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IAcceptsRuntimeInputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IProducesRuntimeOutputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LogFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CustomCodeForActionSequence&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionSequenceResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Here you need to write the custom code you need to execute&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Get the name from the inputs &lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Prepend &quot;Hello, &quot; to the name &lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputMessage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;&quot;Hello, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Set the hello message in the outputs to be returned to the Action Sequence &lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Log the message to the console, don&#39;t forget to include the class and/or change the log level&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;outputMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;// Return the status of execution  &lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Set the resources set in the Action Sequence&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setResources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IActionSequenceResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Set the inputs coming from the Action Sequence  &lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;setInputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;inputs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// Return outputs to the Action Sequence&lt;/span&gt;
	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getOutputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;outputs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
	&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;There are 3 main functions we need to code:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public void setInputs( Map&amp;lt;String, Object&amp;gt; inputs ) : That is executed at the begining to get the inpt variable values.&lt;/li&gt;
  &lt;li&gt;public boolean execute(): With the code to be executed. At the time we already have the inputs and we can write to outputs. Here we are just prepending “Hello” to the name of the user coming from the inputs and write it to the output.&lt;/li&gt;
  &lt;li&gt;public Map&amp;lt;String, Object&amp;gt; getOutputs(): Called at the end of the execution of the last function to return the message to the Action Sequence.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There is one other function we can use, if we are using resources on the Action Sequence and that function is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;public void setResources( Map&amp;lt;String, IActionSequenceResource&amp;gt; resources): In case we want to use resources.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This Java code needs to be compiled and the jar file needs to be added to Pentaho webapp library, and that’s all.&lt;/p&gt;

&lt;p&gt;At the end of the execution of the Action Sequence the output variable will have the message for the user, so it van be displayed on the screen.&lt;/p&gt;

&lt;p&gt;So, you saw that this in another extension point in Pentaho. If we don’t have an action that performs what we need, then it’s time to get our hands on code.&lt;/p&gt;

&lt;p&gt;Hope you can use kettle instead, but if not, just write a message in here, and let others knows what you did!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mfgaspar/mfgaspar.github.io-samples/tree/master/pentaho/custom.code.action.sequence&quot;&gt;Sample code available here.&lt;/a&gt;&lt;/p&gt;

</description>
        <pubDate>Wed, 13 Jul 2016 09:59:00 +0100</pubDate>
        <link>http://mfgaspar.github.io//2016/Pentaho-Action-Sequences/</link>
        <guid isPermaLink="true">http://mfgaspar.github.io//2016/Pentaho-Action-Sequences/</guid>
        
        <category>Action Sequences</category>
        
        <category>Action Sequences</category>
        
        
        <category>Action Sequences</category>
        
      </item>
    
      <item>
        <title>Embedding Analytics in Augmented Reality</title>
        <description>&lt;p&gt;Embedding Analytics in Augmented Reality&lt;/p&gt;

&lt;p&gt;I consider Augmented Reality to be the integration of digital information with the user’s environment whose elements are augmented/supplemented by computer-generated sensory input such as sound, video, graphics or GPS data.  Unlike virtual reality, which creates a totally artificial environment, augmented reality uses the existing environment and overlays new information on top of it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://mfgaspar.github.io/assets/EAIAR_Screncast_small.png&quot; alt=&quot;Analytics and Augemented Reality&quot; /&gt;&lt;/p&gt;

&lt;p&gt;How about bringing &lt;strong&gt;Analytics&lt;/strong&gt; to &lt;strong&gt;Augmented Reality&lt;/strong&gt;?&lt;/p&gt;

&lt;p&gt;A good example would be applying it to smart cities or any other area, where it would be useful to place some analytics on top of our real world image being displayed on the screen of our smart car or simply to our smartphone or tablet.&lt;/p&gt;

&lt;p&gt;Would not only improve peoples life, allowing faster and more accurate decisions were to spend time and money, but also would improve the ability to increase business opportunities for companies.
There is  big pontential to generate business. Companies will see the advantage of giving the best information to the user, that can be driven by the behaviour of each user, like navigations, interests, searchs, and even controlled by the user trajectory after getting insights about places, objects, stores, products, services or anything else. I am sure it be will be big in future, and we will see Gartner paying some more attention to it sooner.&lt;/p&gt;

&lt;p&gt;I really like the idea of using advanced mobile apps, smart glasses or even a smart glass on your vehicle that can help on navigation and get insights that has as a starting point of input, sensors such as sound, video, graphics and GPS data. There are already some applications that allows you to simplify user’s life and that are improving the experience of the user, so why not also bringing analytics and improve it even more?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[UPDATE from the 19th of July 2016]&lt;/strong&gt; Pockémon Go is the live proof that Augmented Reality will be a big part of our life in near future. So, anyone still have doubts about the potential of Augmented Reality and the business opportunities around it?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I am glad to start the work to combine Analytics, Social Media and Augemented Reality, but need a sponsor.&lt;/strong&gt; Anyone to give a step front on this?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[UPDATE from the 19th of July 2016]&lt;/strong&gt; Maybe that one of these days I will have Insights on top of Pockémon Go. Just need Nintent to release an API that we can interact with! Do you wnat to know how many where catch on a specific area and if some of your friends did it? Well I was kidding about it, but who know!&lt;/p&gt;

</description>
        <pubDate>Tue, 12 Jul 2016 09:59:00 +0100</pubDate>
        <link>http://mfgaspar.github.io//2016/Embedding-Pentaho-in-Augmented-Reality/</link>
        <guid isPermaLink="true">http://mfgaspar.github.io//2016/Embedding-Pentaho-in-Augmented-Reality/</guid>
        
        <category>Augmented Reality</category>
        
        <category>Smart Cities</category>
        
        <category>Embedding</category>
        
        
        <category>Augmented Reality</category>
        
        <category>Smart Cities</category>
        
        <category>Embedding</category>
        
      </item>
    
      <item>
        <title>Realtime/Live dashboard using Pentaho and CTools - Part 1: Overview</title>
        <description>&lt;p&gt;This series of posts/post has origins on the last Pentaho Community Meeting that took place in London, November last year, &lt;a href=&quot;https://github.com/PentahoCommunityMeetup2015/info&quot;&gt;PCM 2015&lt;/a&gt;. You can follow up on&lt;br /&gt;
&lt;a href=&quot;https://twitter.com/search?q=%23pcm15%20pentaho&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The first evening, there was a &lt;a href=&quot;http://www.meetup.com/Pentaho-London-User-Group/events/222548597/&quot;&gt;hackathon&lt;/a&gt;, where me Miguel Cunhal and Sam … (sorry Sam, don’t know your last name), received a Raspberry Pi, coutesy of &lt;a href=&quot;[https://twitter.com/ivyinfosystems]&quot;&gt;Ivy IS&lt;/a&gt; as a prize. We really hadn’t the time to complete the project, so I felt that I needed to give them (organization and community) more.&lt;/p&gt;

&lt;p&gt;Given that a Rapesberry Pi is largely used on IoT (Internet Of Things) projects, I will share what we I am calling &lt;strong&gt;Live Insight comming from IoT&lt;/strong&gt;, using Pentaho technology.&lt;/p&gt;

&lt;h3 id=&quot;quick-introduction&quot;&gt;Quick introduction&lt;/h3&gt;

&lt;p&gt;When talking about IoT and Social Innovation (I feel like I should write a new blog post, about my point of view about this terminologies), there are some use cases were we need to display “real-time” data, coming from all kind of “things”.&lt;/p&gt;

&lt;p&gt;For the title of the blog post, I’ve used the name “live data” and not real-time, that’s because real-time at the hardware level is done in milli/micro seconds. Not that we can’t do it really fast at the software level, but it’s not fair for people working in some areas, like electronics, where the concept of real-time can be different from the one where we are displaying information on the bowser and coming through. That’s the reason why I have used the title “live data”, and just to make it clear, this is an example on how data being generated by sensors can be processed on the fly and be delivered (over the internet using) with low lattency with a lower lattency.&lt;/p&gt;

&lt;p&gt;This is just one of the ways to do it, let’s start to cover it.&lt;/p&gt;

&lt;p&gt;A Rapesberry Pi that might have some sensors connected, a mobile phone, a twitter account, and many other “things”.&lt;/p&gt;

&lt;p&gt;When trying to display live data over the internet using a browser we need to keep in mind the internet lattency we might face, as also the time that might be needed to do some calculations, agreggations, clean up, etc..&lt;/p&gt;

&lt;h3 id=&quot;considerations&quot;&gt;Considerations&lt;/h3&gt;

&lt;p&gt;There are a huge demand for real-time dashboards, and there are a couple of questions you may need to consider before starting with this kind of projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;How often is it important to have data refreshed in the dashboard? Usually, after making this question you might realize that you wont need a high refresh rate as you first might though about. A refresh rate of one, two, …, five seconds or more might be more than enough. Even if you have your device is gathering data faster, it might make sense to display it at that refresh rate and you might want to consider to do some aggregation, apply some signal processing algorithms, etc. Of course that always depends on the use case.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Can the users really understand what you are displaying when data is being refreshed too fast? Well I don’t believe so unless, of course some users might be able to do it, but does it makes sense? Usually the user will get lost just when trying to interpret results faster than he is able to. His mind might be so focused about not missing anything that his mind might lost focus on interpreting the values/results. Your end-user should always be able to easily understand what it’s being presented. Once again don’t do it more times than necessary.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Another question that was already slightly touched is. Should we keep the same speed the device is using to sent new information? Not always, specially when the refresh rate is too high. We might want to do some aggregations, display just some part of the values, just keep in mind to process all the values. Let’s suppose you are getting sensor values from an engine and you want to get warnings on values below/above a certain threshold. You can’t simple discard the values, before checking if it’s above or below the thresholds but you might be able to do it after. Another way is to implement that login on your back-end. The dashboard just need to receive notifications about the breaking the thresholds.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;putting-pieces-together&quot;&gt;Putting pieces together&lt;/h3&gt;

&lt;p&gt;There are many ways to bring live data to a dashboard, and I have developed one sample, were I have considered the following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Messages should be sent to the dashboard, but the dashboard should also be able to send messages/instructions to the device.&lt;/li&gt;
  &lt;li&gt;Use Pentaho Data Integration (PDI) to process data, and it should be done as soon as messages arrives from the sensors;&lt;/li&gt;
  &lt;li&gt;Present live data in the dashboard as fast as possible, just for performance measurements on the front-end and back-end.&lt;/li&gt;
  &lt;li&gt;Needs be presented on a CTools dashboard&lt;/li&gt;
  &lt;li&gt;Save as much bandwidth as possible.&lt;/li&gt;
  &lt;li&gt;Should be able to work on mobile devices.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even if I am going to get into details in latter posts, let me inform you ahead about the technologies that were used:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Pentaho BA Server, CTools &amp;amp; Pentaho Data Integration;
    &lt;ul&gt;
      &lt;li&gt;Pentaho BA Server (version 6.0);&lt;/li&gt;
      &lt;li&gt;Ctools (last stable);&lt;/li&gt;
      &lt;li&gt;Pentaho DI (version 6.0);&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;MQTT protocol and libraries &lt;a href=&quot;http://mqtt.org/&quot;&gt;MQTT&lt;/a&gt;, as the protocol to exchange messages:
    &lt;ul&gt;
      &lt;li&gt;I have used &lt;a href=&quot;https://eclipse.org/paho/clients/java/&quot;&gt;Paho&lt;/a&gt; for the back-end;&lt;/li&gt;
      &lt;li&gt;and &lt;a href=&quot;https://github.com/mqttjs/MQTT.js&quot;&gt;MQTT.js&lt;/a&gt; for the front-end;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Mosquitto &lt;a href=&quot;http://mosquitto.org/&quot;&gt;Mosquitto&lt;/a&gt;, a publish/subscribe MQTT Message Broker;
    &lt;ul&gt;
      &lt;li&gt;I have used it in a Docker container.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;small-video&quot;&gt;Small video&lt;/h3&gt;

&lt;p&gt;As this a live/real-time solution and I don’t have the infrastructure to make it available for you to see it working, I have made a video that gives you a high level overview, just keep in mind this is just an overview, I won’t get lost in details (latter posts will detail).&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/M0MKaTKrkAw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h3 id=&quot;future-work&quot;&gt;Future work&lt;/h3&gt;

&lt;p&gt;I will write a couple more of posts under this subject, providing details about the architecture, the back-end and front-end as well as performance metrics like messages per second, memory/processor consumption, etc. If you want to see some specific details, please comment bellow.&lt;/p&gt;

&lt;p&gt;Another post should be written to highlight some of the architecture on how to scale it “big”. This is a solution based on message-centric concepts but I also want to bring some posts on it would work on a data-centric proof-of-concept, of course the architecture and technology will change a bit.&lt;/p&gt;

&lt;p&gt;I already start to think how I can make it work out-of-the-box in CDA/CDE, but that will take much more time.&lt;/p&gt;

</description>
        <pubDate>Mon, 04 Apr 2016 22:40:00 +0100</pubDate>
        <link>http://mfgaspar.github.io//2016/Live-Insights-With-Pentado-and-Ctools-Part-1/</link>
        <guid isPermaLink="true">http://mfgaspar.github.io//2016/Live-Insights-With-Pentado-and-Ctools-Part-1/</guid>
        
        <category>Live Insights</category>
        
        
        <category>Live Insights</category>
        
      </item>
    
      <item>
        <title>Learning Pentaho CTools</title>
        <description>&lt;p&gt;Pentaho and CTools are two of the fastest and most rapidly growing tools for practical solutions not found in any other tool available on the market. Using Pentaho allows you to build a complete analytics solution, and CTools brings an advanced flexibility to customizing them in a remarkable way. CTools provides its users with the ability to utilize Web technologies and data visualization concepts, and make the most of best practices to create a huge visual impact.&lt;/p&gt;

&lt;p&gt;The cover was already released: 
&lt;img src=&quot;http://mfgaspar.github.io/assets/B04770_BookCover_small.png&quot; alt=&quot;Learning Pentaho CTools Cover&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;book-overview&quot;&gt;Book Overview&lt;/h3&gt;

&lt;p&gt;The book starts with the basics of the framework and how to get data to your dashboards. We’ll take you all the way through to create your custom and advanced dashboards that will create an effective visual impact and provide the best user experience. You will be given deep insights into the lifecycle of dashboards and the working of various components. Further, you will create a custom dashboard using the Community Dashboards Editor and use data sources to load data on the components. You will also create custom content using Query, the Freeform Addins Popup, and text components. Next, you will make use of widgets to create similar sections and duplicate components to reproduce other components on a dashboard. You will then learn to build a plugin without writing Java code, use Pentaho App Builder as a CPK plugin manager, and understand the application of deployment and version control to dashboard development. Finally, you will learn tips and tricks that can be very useful while embedding dashboards into other applications.&lt;/p&gt;

&lt;p&gt;This guide is an invaluable tutorial if you are planning to use custom and advanced dashboards among the solutions that you are building with Pentaho.&lt;/p&gt;

&lt;h3 id=&quot;what-you-will-learn&quot;&gt;What You Will Learn&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Install Community Tools on Pentaho; and understand the necessary concepts and considerations when creating an exciting dashboard design&lt;/li&gt;
  &lt;li&gt;Get data from many different Pentaho data sources and deliver it in different formats (CSV, XLS, XML, or JSON)&lt;/li&gt;
  &lt;li&gt;Use the Community Data Access (CDA) as the data abstraction layer and understand the concepts in the Community Dashboard Framework (CDF)&lt;/li&gt;
  &lt;li&gt;Create a Community Dashboard Editor (CDE) dashboard and make the most of the main components&lt;/li&gt;
  &lt;li&gt;Create and make use of widgets and use duplicate components to have data-driven sections on the dashboard&lt;/li&gt;
  &lt;li&gt;Customize and create interaction between all components, including charts, using the Community Charts Components&lt;/li&gt;
  &lt;li&gt;Create and embed dashboards in a better and new way&lt;/li&gt;
  &lt;li&gt;Create a Pentaho plugin using the Pentaho App Builder&lt;/li&gt;
  &lt;li&gt;Create plugins and make use of parameters inside Pentaho without writing code&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;who-this-book-is-for&quot;&gt;Who This Book Is For&lt;/h3&gt;

&lt;p&gt;If you are a CTools developer and would like to expand your knowledge and create attractive dashboards and frameworks, this book is the go-to-guide for you. A basic knowledge of JavaScript and Cascading Style Sheets (CSS) is highly recommended. Definitely a knowledge on Pentaho is a requirement.&lt;/p&gt;

&lt;p&gt;The book is available at &lt;a href=&quot;https://www.packtpub.com/big-data-and-business-intelligence/learning-pentaho-CTools&quot;&gt;Packt&lt;/a&gt; and &lt;a href=&quot;http://www.amazon.com/Learning-Pentaho-CTools-Miguel-Gaspar-ebook/dp/B0171UHJJ6/&quot;&gt;Amazon&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It was expected to be out at the end of this month, but since tomorrow is the last day of the month, It will get a bit delayed :(&lt;/p&gt;

&lt;p&gt;New date points to the &lt;strong&gt;22th of April&lt;/strong&gt;, let’s hope we can keep this date.&lt;/p&gt;

&lt;p&gt;UPDATE:  Book has been released at May, 31&lt;/p&gt;

&lt;p&gt;Any questions please send email or contact me over &lt;a href=&quot;https://www.facebook.com/miguel.ferreira.gaspar&quot;&gt;Facebook&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/migfgaspar&quot;&gt;Twitter&lt;/a&gt;, or &lt;a href=&quot;https://www.linkedin.com/in/mfgaspar&quot;&gt;LinkedIn&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Mar 2016 20:15:00 +0100</pubDate>
        <link>http://mfgaspar.github.io//2016/Ctools-Book/</link>
        <guid isPermaLink="true">http://mfgaspar.github.io//2016/Ctools-Book/</guid>
        
        <category>Pentaho CTools Book</category>
        
        
        <category>Pentaho CTools Book</category>
        
      </item>
    
      <item>
        <title>Welcome to Cooking Analytics</title>
        <description>&lt;p&gt;I hope you can find this Blog interesting, where you will be able to read about Analytics solutions bringing architecture discussions, development technics that can be aplied to Big Data solutions, IoT or Social Innovation solutions, most of the time focused in Pentaho.&lt;/p&gt;

&lt;p&gt;Some of the times you will find just pointers to some other blogs and posts with very intersting stuff, that I believe it might bring value to the topics being discussed. It’s important for me to get feedback from you so that I can go in your way, at the end the blog is for you, so I will relly on you!&lt;/p&gt;

&lt;p&gt;Let me also apologise for the poor English that you might find in the posts, I am getting better day-by-day but still with lots to improve.&lt;/p&gt;

&lt;p&gt;I will try to complement the text with images and videos as mutch as I can. Not sure I will be able to add a section for comments, but will investigate how it can it be done using this or another theme.&lt;/p&gt;

&lt;p&gt;Anyhow, I would prefer to use twitter, facebook for comments, discussions, … and contributions.&lt;/p&gt;

&lt;p&gt;Send me an email if it’s a private comment or question.&lt;/p&gt;

&lt;p&gt;Looking foward to get feedback from you!&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Mar 2016 20:05:00 +0100</pubDate>
        <link>http://mfgaspar.github.io//2016/Welcome/</link>
        <guid isPermaLink="true">http://mfgaspar.github.io//2016/Welcome/</guid>
        
        <category>Cooking Analytics</category>
        
        
        <category>Cooking Analytics</category>
        
      </item>
    
  </channel>
</rss>
